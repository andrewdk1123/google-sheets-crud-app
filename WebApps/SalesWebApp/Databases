/**
 * Part of server-side codes for Google Sheets sales management webapp with CRUD operations.
 * This script is responsible for interacting with the database, including functions for creating, reading, updating, and deleting records in the Google Sheets document.
 * By: andrewdklee.com
 * Github: https://github.com/andrewdk1123/google-sheets-mini-erp
 */

/**
 * Gets a list of people in the user's Google Contacts app with userDefined key "Connections" and value "Sales".
 * The user may delegate his Contacts to sales representatives or anyone who are responsible. 
 * Anyone responsible to manage sales contacts should add a user defined field in the app as predefined in the team, e.g., {"Connections": "Sales"}.
 * @see https://developers.google.com/people/api/rest/v1/people.connections/list
 * @returns {Array} customerArray - A 2D Array of customer names and source IDs
 */
function getSalesConnections() {
  try{
    // Get the list of contacts of the user's profile.
    const people = People.People.Connections.list("people/me", {personFields: "organizations,userDefined"});
  
    // Filter contacts to include only those with userDefined key "Connections" and value "Sales".
    const salesConnections = people.connections.filter(contact => {
      const userDefined = contact.userDefined || [];
      const customField = userDefined.find(field => field.key === "Connections");
      return customField && customField.value === "Sales";
      });
  
    // Extract only organizations from the salesConnections.
    const organizations = salesConnections.map(connection => connection.organizations || []);
  
    // Create a new 2D array to store organization names and source IDs.
    const customerArray = organizations.reduce((result, org) => {
      if (org.length > 0) {
        org.forEach(organizations => {
          const name = organizations.name || "";
          const sourceId = organizations.metadata && organizations.metadata.source ? organizations.metadata.source.id : "";
          result.push([name, sourceId]);
        });
      }

      return result;
    }, []);
  
    return customerArray;
  } catch (err) {
    console.log("Failed to get the connection with an error: %s", err.message);
    return []; 
  }
}

// Clear all existing records in the "Customer Info" sheet and re-write data with updated sales connections.
function refreshCustomerInfo() {
  // Open the Customer Info sheet and clear all existing rows.
  const spreadsheet = SpreadsheetApp.openById(SPREADSHEET);
  const sheet = spreadsheet.getSheetByName(CUSTOMER_INFO);
  sheet.clear();
  
  // Restore the headers.
  const headers = ["Name", "Source ID"];
  GasCrud.createRecord(SPREADSHEET, CUSTOMER_INFO, headers);
  
  // Retrieve latest list of customers and append it to the sheet
  const customers = getSalesConnections();
  for (var i = 0; i < customers.length; i++) {
    GasCrud.createRecord(SPREADSHEET, CUSTOMER_INFO, customers[i]);
  }    
}

/**
 * Process submitted orderEntry form. 
 * If the submitted formObject has valid orderId, then find and update the record in the Invoices sheet. 
 * Otherwise create a new record in the sheet.
 * @param {Object} formObject - An Object containing user inputs from FormOrderEntry.html
 * @return {Array} - The very last 10 order Arrays retrieved from getLastTenOrders() function.
 */
function processOrderEntry(formObject) {
 try {

    // Check if the formObject.orderId is valid.
    if (GasCrud.isValidKey(formObject.orderId, SPREADSHEET, INVOICE, INVOICE_KEY_COL)) {
      
      // If formObject.orderId is valid, find and update the record with newly submitted user inputs.
      const inputArray = [
        formObject.orderId,
        formObject.customerSelect,
        formObject.productSelect,
        formObject.orderDate,
        formObject.orderQuantity,
        formObject.tax,
        formObject.orderNote
      ];
  
      // Fetch product details
      const valueArray = fetchOrderDetails(inputArray);
  
      // Set which record to update
      const updateRange = GasCrud.searchRecordByKey(formObject.orderId, SPREADSHEET, INVOICE, INVOICE_KEY_COL, INVOICE_FIRST_COL, INVOICE_LAST_COL).range;
  
      // Update records in the updateRange with values
      GasCrud.updateRecord(SPREADSHEET, INVOICE, updateRange, valueArray);
  
    } else {
  
      // Create a new record
      const inputArray = [
        GasCrud.generateKey(),
        formObject.customerSelect,
        formObject.productSelect,
        formObject.orderDate,
        formObject.orderQuantity,
        formObject.tax,
        formObject.orderNote
      ];
  
      // Fetch product details
      const valueArray = fetchOrderDetails(inputArray);
  
      // Create a new record with a key
      GasCrud.createRecord(SPREADSHEET, INVOICE, valueArray);
  
    }
  
  return getLastTenOrders();
  
 } catch (error) {
   console.error("Error in processOrderEntry:", error);
   throw new Error("An error occurred while processing the order entry.");
 }
}

/**
 * Fetch customer name, product name, and price info for a single order Array.
 * @param {Array} orderArray - An array containing orderId, customerName, productId.
 * @return {Array} orderWithDetails - An array of values for the order with additional attributes.
 */
function fetchOrderDetails(orderArray) {
  try {
    const customerId = orderArray[1];
    const productId = orderArray[2];

    // Get customer name by the customerId
    const customer = customers.find(function(customer) {
      return customer.id === customerId;
    });

    // Fetch product information by the productId
    const productList = getProductList(customerId);
    const product = productList.find(function(product) {
      return product.id === productId;
    });
  
    // Create a new array with the original order details and additional attributes
    const orderWithDetails = [
      orderArray[0], // ORDER ID
      orderArray[3], // ORDER DATE
      customerId, // CUSTOMER ID
      customer ? customer.name : "Unknown Customer", // CUSTOMER NAME
      productId, // PRODUCT ID
      product ? product.name : "Unknown Product", // PRODUCT NAME
      orderArray[4], // ORDER QUANTITY
      product ? product.price : 0, // PRICE
      orderArray[5], // TAX
      orderArray[6] // NOTES
      ];

    return orderWithDetails;
  
  } catch (error) {
    console.error("An error occurred:", error);
    return []; // Return an empty array in case of an error
  }
}

/**
 * Read and prep the last 10 order records before displaying them in the "invoice-table-body".
 * @return {Array} lastTenRecords - An array containing the last 10 records in the spreadsheet.
 */
function getLastTenOrders() {
  try {
    const dataArray = GasCrud.getTailRows(10, SPREADSHEET, INVOICE, INVOICE_FIRST_COL, INVOICE_LAST_COL);

    if (dataArray && dataArray.length > 0) {
      // Convert Date objects by convertDateToYYYYMMDD() function
      const lastTenRecords = dataArray.map(record => {
        return [
          record[0],
          convertDateToYYYYMMDD(record[1]),
          record[2],
          record[3],
          record[4],
          record[5],
          record[6],
          record[7],
          record[8],
          record[9]
        ];
      });

      return lastTenRecords;
    } else {
      return [];
    }
  } catch (error) {
    console.error("An error occurred:", error);
    return [];
  }
}

/**
 * Search order records in the spreadsheet based on a provided search text.
 * @param {Object} formObject - An object containing a `searchText` property with the text to search for.
 * @return {Array} - An array of records (rows) that contain the search text.
 */
function searchOrderRecords(formObject) {
  let result = [];
  try {
    if (formObject.searchInvoiceText) { // Execute if form passes search text
      const data = GasCrud.readRecord(SPREADSHEET, INVOICE, false, INVOICE_FIRST_COL, INVOICE_LAST_COL);
      const searchText = formObject.searchInvoiceText;

      // Loop through each row and column to search for matches
      for (let i = 0; i < data.length; i++) {                
        for (let j = 4; j < data[i].length; j++) {
          const cellValue = data[i][j].toString();

          if (cellValue.toLowerCase().includes(searchText.toLowerCase())) {
            data[i][1] = convertDateToYYYYMMDD(data[i][1]);

            result.push(data[i]);
            break; // Stop searching for other matches in this row
          }
        }
      }
    }
  } catch (err) {
    console.log('Failed with error %s', err.message);
  }
    
  return result;
}

/**
 * Filter invoice records and return an array where orderDate is inbeween startDate and endDate.
 * @param {String} startDate - Minimum orderDate value to be included in the returning Array.
 * @param {String} endDate - Maximum orderDate value to be included in the returning Array.
 * @return {Array} filteredDate - An Array of order records after applying date filters.
 */
function filterDataByDate(startDate, endDate) {
  var allData = GasCrud.readRecord(SPREADSHEET, INVOICE, false, INVOICE_FIRST_COL, INVOICE_LAST_COL);
  var filteredData = [];

  for (var i = 0; i < allData.length; i++) {
    var date = new Date(allData[i][1]);
    var startDateObj = new Date(startDate);
    var endDateObj = new Date(endDate);

    if (date >= startDateObj && date <= endDateObj) {
      filteredData.push(allData[i]);
    }
  }

  for (var i = 0; i < filteredData.length; i++) {
    filteredData[i][1] = convertDateToYYYYMMDD(filteredData[i][1]);
  }

  return filteredData;
}

/**
 * Delete an order record from Invoices sheet.
 * @param {String} orderId - A unique identifier of the record to delete.
 * @return {Array} - Array of order records after deleting the target row.
 */
function deleteRecordOnServer (orderId) {
  GasCrud.deleteRecord(SPREADSHEET, INVOICE, orderId, "ORDER ID");
  return getLastTenOrders();
}

/**
 * Get an order record Array by orderId.
 * @param {String} orderId - A unique identifier of the record that you are looking for.
 * @return {Array} record - An Array of values from the target row.
 */
function getRecordByIdOnServer (orderId) {
  var record = GasCrud.searchRecordByKey(orderId, SPREADSHEET, INVOICE, INVOICE_KEY_COL, INVOICE_FIRST_COL, INVOICE_LAST_COL).rowData;

  record[1] = convertDateToYYYYMMDD(record[1]);
  return record;
}

/**
 * Return the last 10 product registrations.
 * @return {Array} - An array containing the last 10 product registrations.
 */
function getLastTenProducts() {
  try {
    const dataArray = GasCrud.getTailRows(10, SPREADSHEET, PRODUCT_INFO, PRODUCT_FIRST_COL, PRODUCT_LAST_COL);

    const lastTenProds = dataArray.map(record => {
      return [
        record[1],
        record[4],
        record[3],
        record[5],
        record[6],
        record[7],
        record[8]
      ];
    });

  return lastTenProds;
  
  } catch (error) {
    console.error("An error occurred:", error);
    return [];
  }
}

/**
 * Delete a product registration from Product Info sheet.
 * @param {String} productId - A unique identifier of the record to delete.
 * @return {Array} - Array of product records after deleting the target row.
 */
function deleteProductOnServer (productId) {
  GasCrud.deleteRecord(SPREADSHEET, PRODUCT_INFO, productId, "PRODUCT ID");
  return getLastTenProducts();
}

/**
 * Search product records in the spreadsheet based on a provided search text.
 * @param {Object} formObject - An object containing a `searchProduct` property with the text to search for.
 * @return {Array} - An array of records (rows) that contain the search text with selected columns.
 */
function searchProductRecords(formObject) {
  let result = [];

  try {
    if (formObject.searchProductText) {
      const data = GasCrud.readRecord(SPREADSHEET, PRODUCT_INFO, false, PRODUCT_FIRST_COL, PRODUCT_LAST_COL);
      const searchText = formObject.searchProductText;

      for (let i = 0; i < data.length; i++) {
        for (let j = 1; j < data[i].length; j++) {
          const cellValue = data[i][j].toString();

          if (cellValue.toLowerCase().includes(searchText.toLowerCase())) {
            // Extract and transform specific columns
            const selectedColumns = [
              data[i][1],
              data[i][4],
              data[i][3],
              data[i][5],
              data[i][6],
              data[i][7],
              data[i][8]
            ];

            result.push(selectedColumns);
            break; // Stop searching for other matches in this row
          }
        }
      }
    }
  } catch (err) {
    console.log('Failed with error %s', err.message);
  }

  return result;
}

